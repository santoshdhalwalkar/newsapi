import streamlit as st
from datetime import datetime, timedelta
from langchain.prompts import PromptTemplate
from langchain_config import initialize_apis

# Configure page settings
st.set_page_config(page_title="AI News Research Tool", layout="wide")

# Initialize APIs
try:
    newsapi, groq_llm = initialize_apis()
except ValueError as e:
    st.error(str(e))
    newsapi, groq_llm = None, None

def get_news_articles(query, days_ago=7):
    """Fetch news articles using NewsAPI."""
    if not newsapi:
        st.error("NewsAPI is not initialized.")
        return []

    from_date = (datetime.now() - timedelta(days=days_ago)).strftime('%Y-%m-%d')
    
    try:
        response = newsapi.get_everything(
            q=query,
            language='en',
            sort_by='relevancy',
            from_param=from_date
        )
        return response['articles']
    except Exception as e:
        st.error(f"Error fetching news: {str(e)}")
        return []

def summarize_articles(articles):
    """Generate a summary from the top articles."""
    summaries = []
    for article in articles[:5]:  # Limit to top 5 articles
        summary = article.get("description", "No description available")
        summaries.append(f"Title: {article['title']}\nSummary: {summary}")
    return "\n\n".join(summaries)

def get_analysis(query, articles):
    """Generate AI analysis using Groq LLM."""
    if not groq_llm:
        st.error("Groq LLM is not initialized.")
        return "Error: Groq LLM not available."

    if not articles:
        return "No articles found for the given query."

    template = """You are an AI assistant helping an equity research analyst. Analyze the following news articles and provide a comprehensive summary.

Query: {query}

Articles:
{summaries}

Please provide:
1. Key Points: Main findings and important facts
2. Trends: Identify patterns and market trends
3. Implications: Potential impact on markets and investments
4. Recommendations: Suggested actions or areas to monitor
"""
    prompt = PromptTemplate.from_template(template)
    pipeline = prompt | groq_llm

    try:
        article_summaries = summarize_articles(articles)
        response = pipeline.invoke({
            "query": query,
            "summaries": article_summaries
        })
        return response.content
    except Exception as e:
        st.error(f"Error generating analysis: {str(e)}")
        return "Error generating analysis."

def display_articles(articles):
    """Display articles in Streamlit UI."""
    for article in articles:
        st.markdown("---")
        st.markdown(f"### {article['title']}")

        col1, col2 = st.columns(2)
        with col1:
            st.caption(f"Source: {article['source']['name']}")
        with col2:
            st.caption(f"Published: {article['publishedAt'][:10]}")

        if article.get('urlToImage'):
            st.image(article['urlToImage'], use_column_width=True)

        st.markdown(article.get('description', 'No description available'))
        st.markdown(f"[Read full article]({article['url']})")

# Main UI
st.title("üîç AI News Research Tool")
st.markdown("""
This tool helps equity research analysts gather and analyze news articles using AI.
Enter a search query to begin.
""")

# Search interface
query = st.text_input("Enter your search query:")
days = st.slider("Days to look back:", 1, 30, 7)

col1, col2 = st.columns([1, 4])
with col1:
    search_button = st.button("Search & Analyze")

if search_button and query:
    with st.spinner("Fetching and analyzing news..."):
        articles = get_news_articles(query, days)

        if articles:
            st.markdown("## ü§ñ AI Analysis")
            analysis = get_analysis(query, articles)
            st.markdown(analysis)

            st.markdown("## üì∞ News Articles")
            display_articles(articles)
        else:
            st.warning("No articles found for your query.")